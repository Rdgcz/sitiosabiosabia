// =============================================
// 1. CONFIGURA√á√ïES INICIAIS E IMPORTA√á√ïES
// =============================================

/**
 * Carrega vari√°veis de ambiente do arquivo .env
 * Exemplo: FIREBASE_PROJECT_ID, DATABASE_URL, etc.
 */
require('dotenv').config({ path: '../.env' });

/**
 * Importa as configura√ß√µes validadas do arquivo config.js
 * (Cont√©m Firebase, CORS, Rate Limit, etc.)
 */
const config = require('./config');

// Importa bibliotecas necess√°rias
const admin = require('firebase-admin'); // Firebase Admin SDK
const express = require('express');      // Framework para criar APIs
const cors = require('cors');           // Permite requisi√ß√µes de outros dom√≠nios
const helmet = require('helmet');       // Protege contra vulnerabilidades web
const compression = require('compression'); // Comprime respostas HTTP
const rateLimit = require('express-rate-limit'); // Limita requisi√ß√µes por IP
const multer = require('multer');       // Middleware para upload de arquivos
const path = require('path');           // Manipula√ß√£o de caminhos de arquivos

// Configura√ß√£o do Multer para upload de arquivos
const upload = multer({
  dest: '/tmp/uploads/',
  limits: { fileSize: 10 * 1024 * 1024 } // Limite de 10MB
});

// =============================================
// 2. INICIALIZA√á√ÉO DO FIREBASE (CACHE)
// =============================================

/**
 * Cache da inst√¢ncia do Firebase (evita m√∫ltiplas inicializa√ß√µes)
 */
let firebaseApp;

/**
 * Fun√ß√£o para inicializar o Firebase (se ainda n√£o estiver inicializado)
 * @returns {admin.app.App} Inst√¢ncia do Firebase
 */
const initializeFirebase = () => {
  if (firebaseApp) return firebaseApp; // Retorna se j√° estiver inicializado

  try {
    firebaseApp = admin.initializeApp({
      credential: admin.credential.cert({
        projectId: config.firebase.projectId,
        clientEmail: config.firebase.clientEmail,
        privateKey: config.firebase.privateKey
      }),
      storageBucket: config.firebase.storageBucket,
      databaseURL: config.firebase.databaseUrl
    });

    console.log('‚úÖ Firebase inicializado com sucesso');
    return firebaseApp;
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
    process.exit(1); // Encerra o servidor em caso de erro
  }
};

// =============================================
// 3. CONFIGURA√á√ÉO DO SERVIDOR EXPRESS
// =============================================

/**
 * Configura o servidor Express (rotas, middlewares, seguran√ßa)
 * @returns {express.Application} Aplica√ß√£o Express configurada
 */
const setupServer = () => {
  const app = express();

  // ======================
  // MIDDLEWARES (INTERCEPTADORES)
  // ======================

  // üîí Seguran√ßa avan√ßada com Helmet
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],       // Bloqueia scripts externos
        scriptSrc: ["'self'", "'unsafe-inline'"], // Permite JS inline
        styleSrc: ["'self'", "'unsafe-inline'"],  // Permite CSS inline
        imgSrc: ["'self'", "data:", "https://*.firebaseio.com"], // Imagens permitidas
        connectSrc: ["'self'", `https://${config.firebase.projectId}.firebaseio.com`] // Conex√µes permitidas
      }
    }
  }));

  // üì¶ Comprime respostas HTTP (melhora performance)
  app.use(compression());

  // üìù Configura limite de tamanho para requisi√ß√µes JSON
  app.use(express.json({ limit: config.maxRequestSize || '10kb' }));

  // üåç Configura CORS (permite requisi√ß√µes de outros dom√≠nios)
  app.use(cors({
    origin: config.allowedOrigins.length > 0 ? config.allowedOrigins : false,
    credentials: true, // Permite cookies/autoriza√ß√£o
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'] // M√©todos permitidos
  }));

  // ‚è±Ô∏è Rate Limiting (limita requisi√ß√µes por IP)
  app.use(rateLimit({
    windowMs: parseInt(config.rateWindow) * 60 * 1000 || 15 * 60 * 1000, // 15min padr√£o
    max: config.rateLimit || 100, // M√°ximo de 100 requisi√ß√µes por IP
    message: 'Muitas requisi√ß√µes deste IP. Tente novamente mais tarde.',
    standardHeaders: true, // Cabe√ßalhos HTTP padr√£o
    legacyHeaders: false   // Desativa cabe√ßalhos antigos
  }));

  // ======================
  // ROTAS DA API
  // ======================

  // üîç Rota de Health Check (verifica se o servidor est√° online)
  app.get('/health', (req, res) => res.json({ 
    status: 'healthy',
    environment: config.env, // Ex: "development" ou "production"
    version: '1.0.0',
    uptime: process.uptime() // Tempo de atividade em segundos
  }));

  // üë• Rota para listar usu√°rios (Firestore)
  app.get('/api/users', async (req, res) => {
    try {
      const snapshot = await admin.firestore().collection('users').get();
      res.json(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    } catch (error) {
      console.error('Erro no Firestore:', error);
      res.status(500).json({ error: 'Erro ao buscar usu√°rios' });
    }
  });

  /**
   * üîë Endpoint /api/auth - Valida tokens Firebase e gera tokens do backend
   * M√©todo: POST
   * Body: { token: string } (Token JWT do Firebase)
   */
  app.post('/api/auth', async (req, res) => {
    console.log('\nüîë=== NOVA REQUISI√á√ÉO /api/auth ===');
    console.log('‚è∞ Hor√°rio:', new Date().toISOString());
    console.log('üîç Headers (Autoriza√ß√£o):', req.headers.authorization ? "Presente" : "Ausente");
    console.log('üì¶ Body (Token):', req.body.token ? "Recebido" : "Ausente");

    const { token } = req.body;

    if (!token) {
      console.log('‚ùå Token n√£o enviado');
      return res.status(400).json({ error: 'Token n√£o fornecido' });
    }

    try {
      console.log('‚úÖ Validando token Firebase...');
      const decodedToken = await admin.auth().verifyIdToken(token);
      
      console.log('üéâ Autentica√ß√£o v√°lida!', {
        uid: decodedToken.uid,
        email: decodedToken.email,
        name: decodedToken.name || 'n√£o informado',
        expira_em: new Date(decodedToken.exp * 1000).toLocaleString('pt-BR')
      });

      const backendToken = "token_gerado_pelo_seu_backend";
      console.log('üîê Token do backend gerado:', backendToken);

      res.json({
        success: true,
        user: {
          uid: decodedToken.uid,
          email: decodedToken.email,
          name: decodedToken.name || null,
        },
        backendToken: backendToken
      });

    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error.message);
      res.status(401).json({ error: 'Token inv√°lido ou expirado' });
    }
  });

  /**
   * üìÇ Endpoint /api/files/list - Lista arquivos no Firebase Storage
   * M√©todo: GET
   * Headers: { Authorization: "Bearer <backendToken>" }
   * Query Params: { path: string } (opcional - subdiret√≥rio)
   */
  app.get('/api/files/list', async (req, res) => {
    console.log('\nüìÇ=== REQUISI√á√ÉO PARA LISTAR ARQUIVOS ===');
    
    const token = req.headers.authorization?.split('Bearer ')[1];
    const { path = '' } = req.query;

    try {
      // Valida o token JWT
      const decoded = await admin.auth().verifyIdToken(token);
      const userId = decoded.uid;

      console.log(`üîç Listando arquivos para usu√°rio ${userId} no caminho: ${path || 'raiz'}`);

      // Obt√©m refer√™ncia ao bucket de storage
      const bucket = admin.storage().bucket();
      
      // Lista arquivos no caminho especificado
      const [files] = await bucket.getFiles({
        prefix: `documentos/${userId}/${path}`
      });

      // Filtra e formata os resultados
      const formattedFiles = files.map(file => {
        const fileName = path.basename(file.name);
        return {
          name: fileName,
          path: file.name,
          size: file.metadata.size,
          updated: file.metadata.updated,
          contentType: file.metadata.contentType
        };
      });

      console.log(`‚úÖ Encontrados ${formattedFiles.length} arquivos`);
      res.json({ success: true, files: formattedFiles });

    } catch (error) {
      console.error('‚ùå Erro ao listar arquivos:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao listar arquivos',
        ...(config.env === 'development' && { details: error.message })
      });
    }
  });

  /**
   * ‚¨ÜÔ∏è Endpoint /api/files/upload - Faz upload de arquivos para o Firebase Storage
   * M√©todo: POST
   * Headers: { 
   *   Authorization: "Bearer <backendToken>",
   *   Content-Type: "multipart/form-data"
   * }
   * Body: FormData com campos:
   *   - file: Arquivo a ser enviado
   *   - path: (opcional) Subdiret√≥rio de destino
   */
  app.post('/api/files/upload', upload.single('file'), async (req, res) => {
    console.log('\n‚¨ÜÔ∏è=== REQUISI√á√ÉO DE UPLOAD ===');
    
    const token = req.headers.authorization?.split('Bearer ')[1];
    const { path = '' } = req.body;
    const file = req.file;

    if (!file) {
      console.log('‚ùå Nenhum arquivo enviado');
      return res.status(400).json({ success: false, error: 'Nenhum arquivo enviado' });
    }

    try {
      // Valida o token JWT
      const decoded = await admin.auth().verifyIdToken(token);
      const userId = decoded.uid;

      console.log(`üì§ Recebido arquivo ${file.originalname} (${file.size} bytes) para usu√°rio ${userId}`);

      // Define o caminho de destino no Storage
      const destination = `documentos/${userId}/${path}${path ? '/' : ''}${file.originalname}`;
      
      // Faz upload para o Firebase Storage
      await admin.storage().bucket().upload(file.path, {
        destination: destination,
        metadata: {
          contentType: file.mimetype,
          metadata: {
            uploadedBy: userId,
            originalName: file.originalname
          }
        }
      });

      console.log(`‚úÖ Upload conclu√≠do: ${destination}`);
      res.json({ 
        success: true,
        message: 'Arquivo enviado com sucesso',
        path: destination
      });

    } catch (error) {
      console.error('‚ùå Erro no upload:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao enviar arquivo',
        ...(config.env === 'development' && { details: error.message })
      });
    } finally {
      // Remove o arquivo tempor√°rio ap√≥s o upload
      if (file && file.path) {
        require('fs').unlinkSync(file.path);
      }
    }
  });

  /**
   * üóëÔ∏è Endpoint /api/files/delete - Remove arquivo do Firebase Storage
   * M√©todo: DELETE
   * Headers: { Authorization: "Bearer <backendToken>" }
   * Body: { path: string } (caminho completo do arquivo no Storage)
   */
  app.delete('/api/files/delete', async (req, res) => {
    console.log('\nüóëÔ∏è=== REQUISI√á√ÉO PARA EXCLUIR ARQUIVO ===');
    
    const token = req.headers.authorization?.split('Bearer ')[1];
    const { path } = req.body;

    if (!path) {
      console.log('‚ùå Caminho do arquivo n√£o especificado');
      return res.status(400).json({ success: false, error: 'Caminho do arquivo n√£o especificado' });
    }

    try {
      // Valida o token JWT
      const decoded = await admin.auth().verifyIdToken(token);
      const userId = decoded.uid;

      // Verifica se o arquivo pertence ao usu√°rio
      if (!path.startsWith(`documentos/${userId}/`)) {
        console.log('‚ùå Tentativa de acessar arquivo de outro usu√°rio');
        return res.status(403).json({ success: false, error: 'Acesso n√£o autorizado' });
      }

      console.log(`üóëÔ∏è Solicitada exclus√£o do arquivo: ${path}`);

      // Remove o arquivo do Storage
      await admin.storage().bucket().file(path).delete();

      console.log('‚úÖ Arquivo exclu√≠do com sucesso');
      res.json({ success: true, message: 'Arquivo exclu√≠do com sucesso' });

    } catch (error) {
      console.error('‚ùå Erro ao excluir arquivo:', error);
      res.status(500).json({ 
        success: false,
        error: 'Erro ao excluir arquivo',
        ...(config.env === 'development' && { details: error.message })
      });
    }
  });

  // ======================
  // TRATAMENTO DE ERROS
  // ======================

  // ‚ùå Rota n√£o encontrada (404)
  app.use((req, res) => {
    res.status(404).json({ error: 'Endpoint n√£o encontrado' });
  });

  // üö® Tratamento global de erros (500)
  app.use((err, req, res, next) => {
    console.error('Erro no servidor:', err);
    res.status(500).json({ 
      error: 'Erro interno no servidor',
      ...(config.env === 'development' && { stack: err.stack }) // Mostra stacktrace apenas em desenvolvimento
    });
  });

  return app;
};

// =============================================
// 4. INICIALIZA√á√ÉO E GERENCIAMENTO DO SERVIDOR
// =============================================

/**
 * Inicia o servidor e configura encerramento seguro
 */
const startServer = async () => {
  try {
    // üî• Inicializa Firebase
    const firebaseApp = initializeFirebase();

    // üöÄ Configura o servidor Express
    const app = setupServer();

    // ‚ö° Inicia o servidor HTTP
    const server = app.listen(config.port, config.host, () => {
      console.log(`
        üöÄ Backend rodando: http://${config.host}:${config.port}
        ‚öôÔ∏è  Modo: ${config.env}
        üîó CORS: ${config.allowedOrigins.join(', ')}
        üî• Firebase: ${config.firebase.projectId}
      `);
    });

    // ======================
    // ENCERRAMENTO SEGURO (GRACEFUL SHUTDOWN)
    // ======================
    const shutdownSignals = ['SIGINT', 'SIGTERM', 'SIGQUIT']; // Sinais de desligamento
    shutdownSignals.forEach(signal => {
      process.on(signal, async () => {
        console.log(`\nüõë Recebido ${signal}, encerrando servidor...`);

        // 1Ô∏è‚É£ Fecha o servidor HTTP
        server.close(async () => {
          console.log('‚úÖ Servidor HTTP fechado');

          // 2Ô∏è‚É£ Encerra conex√µes do Firebase
          if (firebaseApp) {
            await Promise.all(
              admin.apps.map(app => app?.delete()) // Fecha todas as inst√¢ncias
            );
            console.log('‚úÖ Conex√µes do Firebase encerradas');
          }

          // 3Ô∏è‚É£ Encerra o processo
          process.exit(0);
        });

        // ‚è±Ô∏è Timeout de seguran√ßa (10 segundos)
        setTimeout(() => {
          console.error('‚ùå For√ßando encerramento por timeout');
          process.exit(1);
        }, 10000).unref(); // Evita que o timeout impe√ßa o encerramento
      });
    });

    return server;
  } catch (error) {
    console.error('‚ùå Falha na inicializa√ß√£o:', error);
    process.exit(1); // Encerra com erro
  }
};

// ‚ö° INICIA O SERVIDOR
startServer().catch(err => {
  console.error('‚ùå Erro cr√≠tico:', err);
  process.exit(1);
});